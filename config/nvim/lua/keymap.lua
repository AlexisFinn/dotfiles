local cmd = vim.cmd
local keymap = vim.keymap.set
local telescope = require('telescope.builtin')
local telescopeExt = require('telescope').extensions

-- alias dd to buffer delete (bd)
cmd 'cnoreabbrev dd bd'
-- also alow to write with uppercase W
cmd 'command! W w'

-- open File Manager with F9 or <space> m
--keymap('n', '<F9>', ':Vifm<CR>', {})
-- keymap('n', '<F9>', ':NvimTreeFindFileToggle<CR>', {})
-- keymap('n', '<space>m', ':NvimTreeFindFileToggle<CR>', {})
-- keymap('n', '<F10>', ':RnvimrToggle<CR>', {})

-- split window switching, just map Ctrl + J,K,L,H without having to type Crtl + W before
-- keymap('n', '<space>j', '<C-W><C-J>', { noremap = true })
-- keymap('n', '<space>k', '<C-W><C-K>', { noremap = true })
-- keymap('n', '<space>l', '<C-W><C-L>', { noremap = true })
-- keymap('n', '<space>h', '<C-W><C-H>', { noremap = true })
-- keymap('n', '<space>S', ':split<CR>', { noremap = true })

-- ctrl + l to remove highlights (after search typically)
-- keymap('n', '<C-s>', ':noh<CR>', { noremap = true })

-- telescope
-- keymap('n', '<space>f', ':Telescope grep_string<CR>', { noremap = true }) -- same as ctrl+p function but using telescope
-- keymap('n', '<space>rg', ':Telescope live_grep<CR>', { noremap = true })
-- keymap('n', '<space>o', ':Telescope project<CR>', {})
-- keymap('n', '<space>p', ':Telescope find_files<CR>', {})
-- keymap('n', '<space>s', ':Telescope session-lens search_session<CR>', { noremap = true })

-- custom
-- keymap('n', '<space>q', function()
  -- cmd('q')
-- end, {})-- description = 'Quit'
-- keymap('n', '<F10>', function()
  -- cmd('NvimTreeFindFileToggle')
-- end, {})-- description = 'Open nvim-tree file manager', mode = {'n'}},
-- keymap('n', '<F9>', function()
  -- cmd('RnvimrToggle')
-- end, {})-- description = 'Open ranger file manager', mode = {'n'}},
-- keymap('n', '<C-s>', function()
  -- cmd('noh')
-- end, {})-- description = 'Remove all search highlights', mode = {'n'}},
-- keymap('n', '<space>S', function()
  -- cmd('split')
-- end, {})-- description = 'Split window horizontally', mode = {'n'}},
-- keymap('n', '<space>rg', function()
  -- telescope.live_grep()
-- end, {})-- description = 'Search for a word or sentence within the project', mode = {'n'}},
-- keymap('n', '<space>o', function()
  -- telescopeExt.project.project()
-- end, {})-- description = 'Search for project', mode = {'n'}},
-- keymap('n', '<space>s', function()
  -- require('auto-session.session-lens').search_session()
-- end, {})-- description = 'Search for a session within the saved session', mode = {'n'}},
-- vim.keymap.set('n', '<space>dd', function()
  -- vim.cmd('bd')
-- end, {})-- description = 'Delete current buffer', mode = {'n'}},
-- vim.keymap.set('n', '<space>da', function()
  -- vim.cmd('bufdo bd')
-- end, {})-- description = 'Delete all buffers', mode = {'n'}},
-- vim.keymap.set('n', '<C-PageUp>', function()
  -- vim.cmd('BufferLineCyclePrev')
-- end, {})-- description = 'Previous Buffer', mode = {'n'}},
-- vim.keymap.set('n', '<C-PageDown>', function()
  -- vim.cmd('BufferLineCycleNext')
-- end, {})-- description = 'Next Buffer', mode = {'n'}},
-- vim.keymap.set('n', '<space><PageUp>', function()
  -- vim.cmd('BufferLineMovePrev')
-- end, {})-- description = 'Move buffer left', mode = {'n'}},
-- vim.keymap.set('n', '<space><PageDown>', function()
  -- vim.cmd('BufferLineMoveNext')
-- end, {})-- description = 'Move buffer right', mode = {'n'}},
-- vim.keymap.set('n', '<space>w', function()
  -- vim.cmd('w')
-- end, {})-- description = 'Write changes', mode = {'n'}},
-- vim.keymap.set('n', '<space>c', function()
  -- vim.cmd('call nerdcommenter#Comment("n", "toggle")')
-- end, {})-- description = 'Toggle comment', mode = {'n', 'v'}},
-- vim.keymap.set('n', '<space>[', function()
  -- vim.cmd('SplitjoinSplit')
-- end, {})-- description = 'Split code structure into multiple lines', mode = {'n'}},
-- vim.keymap.set('n', '<space>]', function()
  -- vim.cmd('SplitjoinJoin')
-- end, {})-- description = 'Join code structure into single line', mode = {'n'}},
-- vim.keymap.set('n', '<space>e', function ()
  -- vim.cmd('IronFocus')
-- end, {})-- description = 'Launch code runner for current filetype', mode = {'n'}},
-- vim.keymap.set('n', '<space>H', function()
  -- vim.cmd('Legendary')
-- end, {})-- description = 'Open legendary keymap/command helper', mode = {'n'}},
-- vim.keymap.set('n', '<space>gg', function()
  -- vim.cmd('Git')
-- end, {})-- description = 'Open git fugitive', mode = {'n'}},
-- vim.keymap.set('n', '<space>ga', function ()
  -- vim.cmd('Git add %')
-- end, {})-- description = 'Git add current file to git', mode = {'n'}},
-- vim.keymap.set('n', '<space>R', function()
  -- vim.cmd('Telescope registers')
-- end, {})-- description = 'Search through registers with Telescope', mode = {'n'}},
-- vim.keymap.set('n', '<space>z', function()
  -- vim.cmd('TSHighlightCapturesUnderCursor')
-- end, {})-- description = 'Get highlight group of word under cursor', mode = {'n'}},
-- vim.keymap.set('n', '<space>tt', function()
  -- vim.diagnostic.open_float({border = "rounded"})
-- end, {})-- description = 'Show Current lsp error', mode = {'n'}},
-- vim.keymap.set('n', '<space>tn', function()
  -- vim.diagnostic.goto_next({float = {border = "rounded"}})
-- end, {})-- description = 'Go to Next lsp error', mode = {'n'}},
-- vim.keymap.set('n', '<space>tN', function()
  -- vim.diagnostic.goto_prev({float= {border = "rounded"}})
-- end, {})-- description = 'Go to Previous lsp error', mode = {'n'}},
-- vim.keymap.set('n', '<space>p', function ()
  -- telescope.find_files()
-- end, {})-- description = 'Search for a file within the project', mode = {'n'}},
-- keymap('n', '<space>dd', ':bd<CR>', {})
-- keymap('n', '<space>da', ':bufdo bd<CR>', {})
-- keymap('n', '<space>w', ':w<CR>', {})
-- keymap('n', '<space>c', ':call nerdcommenter#Comment("n", "toggle")<CR>', {})
-- keymap('v', '<space>c', ':call nerdcommenter#Comment("n", "toggle")<CR>', {})
-- keymap('n', '<space>[', ':SplitjoinSplit<CR>', {})
-- keymap('n', '<space>]', ':SplitjoinJoin<CR>', {})
-- keymap('n', '<space>e', ':IronFocus<CR>', {})

-- vim-fugitive
-- alias git diff
-- cmd 'cnoreabbrev diff Gdiffsplit'
-- cmd 'cnoreabbrev vdiff Gvdiffsplit'
